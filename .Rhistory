if (max(a)-min(a)==0) {
count=count+1
}
}
print(count/100000)
p=0.3
count=0
for (i in 1:100000) {
a=rgeom(2,p)
if (max(a)-min(a)==2) {
count=count+1
}
}
print(count/100000)
p=0.3
count=0
for (i in 1:100000) {
a=rgeom(2,p)
if (max(a)-min(a)==2) {
count=count+1
}
}
print(count/100000)
p=0.3
count=0
for (i in 1:100000) {
a=rgeom(2,p)
if (max(a)-min(a)==2) {
count=count+1
}
}
print(count/100000)
p=0.3
count=0
for (i in 1:100000) {
a=rgeom(2,p)
if (max(a)-min(a)==2) {
count=count+1
}
}
print(count/100000)
p=0.3
count=0
for (i in 1:100000) {
a=rgeom(2,p)
if (max(a)-min(a)==2) {
count=count+1
}
}
count2=0
for (i in 1:10000) {
if (min(rgeom(2,p))==1) {
count2=count2+1
}
}
count3=0
for (i in 1:10000) {
a=rgeom(2,p)
if (min(a)==1 & max(a)==3) {
count3=count3+1
}
}
print(count3/10000)
print(count*count2/10000^2)
p=0.3
count=0
for (i in 1:100000) {
a=rgeom(2,p)
if (max(a)-min(a)==2) {
count=count+1
}
}
count2=0
for (i in 1:10000) {
if (min(rgeom(2,p))==1) {
count2=count2+1
}
}
count3=0
for (i in 1:10000) {
a=rgeom(2,p)
if (min(a)==1 & max(a)==3) {
count3=count3+1
}
}
print(count3/10000)
print(count*count2/10000^2)
p=0.3
count=0
for (i in 1:100000) {
a=rgeom(2,p)
if (max(a)-min(a)==2) {
count=count+1
}
}
count2=0
for (i in 1:10000) {
if (min(rgeom(2,p))==1) {
count2=count2+1
}
}
count3=0
for (i in 1:10000) {
a=rgeom(2,p)
if (min(a)==1 & max(a)==3) {
count3=count3+1
}
}
print(count3/10000)
print(count*count2/10000^2)
p=0.3
count=0
for (i in 1:100000) {
a=rgeom(2,p)
if (max(a)-min(a)==2) {
count=count+1
}
}
count2=0
for (i in 1:10000) {
if (min(rgeom(2,p))==1) {
count2=count2+1
}
}
count3=0
for (i in 1:10000) {
a=rgeom(2,p)
if (min(a)==1 & max(a)==3) {
count3=count3+1
}
}
print(count3/10000)
print(count*count2/10000^2)
p=0.3
count=0
for (i in 1:100000) {
a=rgeom(2,p)
if (max(a)-min(a)==2) {
count=count+1
}
}
count2=0
for (i in 1:10000) {
if (min(rgeom(2,p))==1) {
count2=count2+1
}
}
count3=0
for (i in 1:10000) {
a=rgeom(2,p)
if (min(a)==1 & max(a)==3) {
count3=count3+1
}
}
print(count3/10000)
print(count*count2/10000^2)
p=0.3
count=0
for (i in 1:100000) {
a=rgeom(2,p)
if (max(a)-min(a)==2) {
count=count+1
}
}
count2=0
for (i in 1:10000) {
if (min(rgeom(2,p))==1) {
count2=count2+1
}
}
count3=0
for (i in 1:10000) {
a=rgeom(2,p)
if (min(a)==1 & max(a)==3) {
count3=count3+1
}
}
print(count3/10000)
print(count*count2/(10000^2))
p=0.3
count=0
for (i in 1:10000) {
a=rgeom(2,p)
if (max(a)-min(a)==2) {
count=count+1
}
}
count2=0
for (i in 1:10000) {
if (min(rgeom(2,p))==1) {
count2=count2+1
}
}
count3=0
for (i in 1:10000) {
a=rgeom(2,p)
if (min(a)==1 & max(a)==3) {
count3=count3+1
}
}
print(count3/10000)
print(count*count2/(10000^2))
p=0.3
count=0
for (i in 1:10000) {
a=rgeom(2,p)
if (max(a)-min(a)==2) {
count=count+1
}
}
count2=0
for (i in 1:10000) {
if (min(rgeom(2,p))==1) {
count2=count2+1
}
}
count3=0
for (i in 1:10000) {
a=rgeom(2,p)
if (min(a)==1 & max(a)==3) {
count3=count3+1
}
}
print(count3/10000)
print(count*count2/(10000^2))
p=0.3
count=0
for (i in 1:10000) {
a=rgeom(2,p)
if (max(a)-min(a)==2) {
count=count+1
}
}
count2=0
for (i in 1:10000) {
if (min(rgeom(2,p))==1) {
count2=count2+1
}
}
count3=0
for (i in 1:10000) {
a=rgeom(2,p)
if (min(a)==1 & max(a)==3) {
count3=count3+1
}
}
print(count3/10000)
print(count*count2/(10000^2))
p=0.3
count=0
for (i in 1:10000) {
a=rgeom(2,p)
if (max(a)-min(a)==2) {
count=count+1
}
}
count2=0
for (i in 1:10000) {
if (min(rgeom(2,p))==1) {
count2=count2+1
}
}
count3=0
for (i in 1:10000) {
a=rgeom(2,p)
if (min(a)==1 & max(a)==3) {
count3=count3+1
}
}
print(count3/10000)
print(count*count2/(10000^2))
p=0.3
count=0
for (i in 1:10000) {
a=rgeom(2,p)
if (max(a)-min(a)==2) {
count=count+1
}
}
count2=0
for (i in 1:10000) {
if (min(rgeom(2,p))==1) {
count2=count2+1
}
}
count3=0
for (i in 1:10000) {
a=rgeom(2,p)
if (min(a)==1 & max(a)==3) {
count3=count3+1
}
}
print(count3/10000)
print(count*count2/(10000^2))
p=0.3
count=0
for (i in 1:10000) {
a=rgeom(2,p)
if (max(a)-min(a)==2) {
count=count+1
}
}
count2=0
for (i in 1:10000) {
if (min(rgeom(2,p))==1) {
count2=count2+1
}
}
count3=0
for (i in 1:10000) {
a=rgeom(2,p)
if (min(a)==1 & max(a)==3) {
count3=count3+1
}
}
print(count3/10000)
print(count*count2/(10000^2))
p=0.3
count=0
for (i in 1:10000) {
a=rgeom(2,p)
if (max(a)-min(a)==3) {
count=count+1
}
}
count2=0
for (i in 1:10000) {
if (min(rgeom(2,p))==0) {
count2=count2+1
}
}
count3=0
for (i in 1:10000) {
a=rgeom(2,p)
if (min(a)==0 & max(a)==3) {
count3=count3+1
}
}
print(count3/10000)
print(count*count2/(10000^2))
p=0.3
count=0
for (i in 1:10000) {
a=rgeom(2,p)
if (max(a)-min(a)==3) {
count=count+1
}
}
count2=0
for (i in 1:10000) {
if (min(rgeom(2,p))==0) {
count2=count2+1
}
}
count3=0
for (i in 1:10000) {
a=rgeom(2,p)
if (min(a)==0 & max(a)==3) {
count3=count3+1
}
}
print(count3/10000)
print(count*count2/(10000^2))
p=0.3
count=0
for (i in 1:10000) {
a=rgeom(2,p)
if (max(a)-min(a)==3) {
count=count+1
}
}
count2=0
for (i in 1:10000) {
if (min(rgeom(2,p))==0) {
count2=count2+1
}
}
count3=0
for (i in 1:10000) {
a=rgeom(2,p)
if (min(a)==0 & max(a)==3) {
count3=count3+1
}
}
print(count3/10000)
print(count*count2/(10000^2))
p=0.3
count=0
for (i in 1:10000) {
a=rgeom(2,p)
if (max(a)-min(a)==3) {
count=count+1
}
}
count2=0
for (i in 1:10000) {
if (min(rgeom(2,p))==0) {
count2=count2+1
}
}
count3=0
for (i in 1:10000) {
a=rgeom(2,p)
if (min(a)==0 & max(a)==3) {
count3=count3+1
}
}
print(count3/10000)
print(count*count2/(10000^2))
p=0.3
count=0
for (i in 1:10000) {
a=rgeom(2,p)
if (max(a)-min(a)==3) {
count=count+1
}
}
count2=0
for (i in 1:10000) {
if (min(rgeom(2,p))==0) {
count2=count2+1
}
}
count3=0
for (i in 1:10000) {
a=rgeom(2,p)
if (min(a)==0 & max(a)==3) {
count3=count3+1
}
}
print(count3/10000)
print(count*count2/(10000^2))
choose(98:99,5)
sum(choose(96:98,5)/choose(100,5))
pairlist(96,97,98)
var1=0
for (i in 96:98) {
for (j in 96:98) {
var1=var1-choose(i,5)*choose(j,5)/choose(100,5)^2
}
var1=var1+choose(i,5)/choose(100,5)
}
for (i in 93:95) {
var1=var1+2*choose(i,5)/choose(100,5)
}
var1
var1=0
for (i in 96:98) {
for (j in 96:98) {
var1=var1-choose(i,5)*choose(j,5)/choose(100,5)^2
}
var1=var1+choose(i,5)/choose(100,5)
}
for (i in 93:95) {
var1=var1+2*choose(i,5)/choose(100,5)
}
var1
var1=0
for (i in 96:98) {
for (j in 96:98) {
var1=var1-choose(i,5)*choose(j,5)/choose(100,5)^2
}
#var1=var1+choose(i,5)/choose(100,5)
}
for (i in 96:98) {
var1=var1+choose)(i,5)/choose(100,5)
}
for (i in 93:95) {
var1=var1+2*choose(i,5)/choose(100,5)
}
var1
var1=0
for (i in 96:98) {
for (j in 96:98) {
var1=var1-choose(i,5)*choose(j,5)/choose(100,5)^2
}
#var1=var1+choose(i,5)/choose(100,5)
}
for (i in 96:98) {
var1=var1+choose(i,5)/choose(100,5)
}
for (i in 93:95) {
var1=var1+2*choose(i,5)/choose(100,5)
}
var1
var1=0
for (i in 96:98) {
for (j in 96:98) {
var1=var1-choose(i,5)*choose(j,5)/choose(100,5)^2
}
var1=var1+choose(i,5)/choose(100,5)
}
for (i in 93:95) {
var1=var1+2*choose(i,5)/choose(100,5)
}
var1
library(quantmod) # allows easy access to datalibrary(rugarch) # GARCH softwareacf1 <- function(Y,nlag){  # function for better acfs  x <- acf(Y,nlag,plot=FALSE) # remove 0 lag  x$acf[1] <- NA  return(x)}# get Data.  US main market index, S&P500getSymbols(’SPY’,src=’yahoo’,from="1990-01-01",to = Sys.Date())mY = matrix(log(SPY[,"SPY.Close"]),ncol=1)# plot dataplot(mY,type="l",main="Log of SPDR SP500",ylab="Log price")mYdiff = diff(mY,1)# plot summariespar(mfcol=c(2,2), mar=c(2,2,1.0,0.0), oma=c(1.5,2,1,1))plot(acf1(mYdiff,15),main="ACf of returns")plot(acf1(abs(mYdiff),15),main="ACf of abs returns")plot(acf1(mYdiff^2,15),main="ACf of returns")par(mfcol=c(1,1), mar=c(2,2,1.0,0.0), oma=c(1.5,2,1,1))# use GARCH software to estimate modelspec = ugarchspec()fit = ugarchfit(data = mYdiff, spec = spec)fitcoef(fit)plot(fit,which="all")
install.packages("quantmod")
install.packages("rugarch")
library(quantmod) # allows easy access to data
library(rugarch) # GARCH software
library(quantmod) # allows easy access to data
library(rugarch) # GARCH software
library(rugarch) # GARCH software
library("rugarch", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:rugarch", unload=TRUE)
library(rugarch) # GARCH software
install.packages("rugarch")
library(rugarch)
install.packages("rgl")
source('~/Desktop/Uni/Harvard/121/final-project/attempted_knn.R')
setwd("Desktop/Uni/Harvard/220/HW8")
